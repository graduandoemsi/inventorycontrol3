-- MySQL Script generated by MySQL Workbench
-- 10/05/15 05:39:15
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema inventorycontrol
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema inventorycontrol
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `inventorycontrol` DEFAULT CHARACTER SET utf8 ;
USE `inventorycontrol` ;

-- -----------------------------------------------------
-- Table `inventorycontrol`.`categoria_produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`categoria_produto` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `descricao` VARCHAR(45) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `inventorycontrol`.`categoria_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`categoria_usuario` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `descricao` VARCHAR(45) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `inventorycontrol`.`produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`produto` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `descricao` VARCHAR(45) NOT NULL COMMENT '',
  `status` VARCHAR(7) NOT NULL COMMENT '',
  `categoria_produto_id` INT(11) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `produto_categoria_idx` (`categoria_produto_id` ASC)  COMMENT '',
  CONSTRAINT `produto_categoria`
    FOREIGN KEY (`categoria_produto_id`)
    REFERENCES `inventorycontrol`.`categoria_produto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `inventorycontrol`.`entrada_produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`entrada_produto` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `id_produto` INT(11) NOT NULL COMMENT '',
  `quantidade` INT(11) NOT NULL COMMENT '',
  `data` DATE NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `produto_entrada_idx` (`id_produto` ASC)  COMMENT '',
  CONSTRAINT `produto_entrada`
    FOREIGN KEY (`id_produto`)
    REFERENCES `inventorycontrol`.`produto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `inventorycontrol`.`estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`estoque` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `id_produto` INT(11) NOT NULL COMMENT '',
  `quantidade` INT(11) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `produto_estoque_idx` (`id_produto` ASC)  COMMENT '',
  CONSTRAINT `produto_estoque`
    FOREIGN KEY (`id_produto`)
    REFERENCES `inventorycontrol`.`produto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `inventorycontrol`.`saida_produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`saida_produto` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `id_produto` INT(11) NOT NULL COMMENT '',
  `quantidade` INT(11) NOT NULL COMMENT '',
  `data` DATE NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `produto_saida_idx` (`id_produto` ASC)  COMMENT '',
  CONSTRAINT `produto_saida`
    FOREIGN KEY (`id_produto`)
    REFERENCES `inventorycontrol`.`produto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `inventorycontrol`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inventorycontrol`.`usuario` (
  `id` INT(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `login` VARCHAR(45) NOT NULL COMMENT '',
  `senha` VARCHAR(45) NOT NULL COMMENT '',
  `categoria_id` INT(11) NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `usuario_categoria_idx` (`categoria_id` ASC)  COMMENT '',
  CONSTRAINT `usuario_categoria`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `inventorycontrol`.`categoria_usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `inventorycontrol` ;

-- -----------------------------------------------------
-- procedure Procedure_AtualizaEstoque
-- -----------------------------------------------------

DELIMITER $$
USE `inventorycontrol`$$
CREATE DEFINER=`control`@`%` PROCEDURE `Procedure_AtualizaEstoque`( `id_prod` int, `qtde_comprada` int)
BEGIN
    declare contador int(11);

    SELECT count(*) into contador FROM estoque WHERE id_produto = id_prod;

    IF contador > 0 THEN
        UPDATE estoque SET quantidade=quantidade + qtde_comprada
        WHERE id_produto = id_prod;
    ELSE
        INSERT INTO estoque (id_produto, quantidade) values (id_prod, qtde_comprada);
    END IF;
END$$

DELIMITER ;
USE `inventorycontrol`;

DELIMITER $$
USE `inventorycontrol`$$
CREATE
DEFINER=`control`@`%`
TRIGGER `inventorycontrol`.`TRIGGER_EntradaProduto_AI`
AFTER INSERT ON `inventorycontrol`.`entrada_produto`
FOR EACH ROW
BEGIN
      CALL Procedure_AtualizaEstoque (new.id_produto, new.quantidade);
END$$

USE `inventorycontrol`$$
CREATE
DEFINER=`control`@`%`
TRIGGER `inventorycontrol`.`TRIGGER_EntradaProduto_AU`
AFTER UPDATE ON `inventorycontrol`.`entrada_produto`
FOR EACH ROW
BEGIN
      CALL Procedure_AtualizaEstoque (new.id_produto, new.quantidade - old.quantidade );
END$$

USE `inventorycontrol`$$
CREATE
DEFINER=`control`@`%`
TRIGGER `inventorycontrol`.`TRIGGER_SaidaProduto_AI`
AFTER INSERT ON `inventorycontrol`.`saida_produto`
FOR EACH ROW
BEGIN
      CALL Procedure_AtualizaEstoque (new.id_produto, new.quantidade * -1);
END$$

USE `inventorycontrol`$$
CREATE
DEFINER=`control`@`%`
TRIGGER `inventorycontrol`.`TRIGGER_SaidaProduto_AU`
AFTER UPDATE ON `inventorycontrol`.`saida_produto`
FOR EACH ROW
BEGIN
      CALL Procedure_AtualizaEstoque (new.id_produto, old.quantidade - new.quantidade);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
